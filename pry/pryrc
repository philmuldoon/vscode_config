# Editor
Pry.editor = ENV['EDTIOR']
Pry.config.editor = ENV['VISUAL']
# If we're inside EMACS, we don't want paging or indentation support.
if ENV['INSIDE_EMACS']
  Pry.config.correct_indent = false
  Pry.config.pager = false
end


# Presentation. Colour defaults.
Pry.color = true
Pry.config.color = true

# Save history, and configure  <ENTER> with no input to run the last command.
Pry.config.history_save = true
Pry::Commands.command /^$/, "repeat last command" do
  pry_instance.run_command Pry.history.to_a.last
end

# Alias to match GDB/LLDB abbreviations.
if defined?(PryByebug) || defined?(PryDebugger)
   Pry.commands.alias_command 'c', 'continue' rescue nil
   Pry.commands.alias_command 'ss', 'step' rescue nil
   Pry.commands.alias_command 'n', 'next' rescue nil
   Pry.commands.alias_command 'f', 'finish' rescue nil
end
if defined?(PryStackExplorer)
  Pry.commands.alias_command 'bt', 'backtrace' rescue nil
  Pry.commands.alias_command 'frame up', 'up'
  Pry.commands.alias_command 'frame down', 'down'
end

# Some other Aliases
Pry.commands.alias_command 'r!', 'reload!' rescue nil

# Format the prompt
if defined?(Rails)
    case Rails.env
    when 'production'
      bold_upcased_env = Pry::Helpers::Text.bold(Rails.env.upcase)
      Pry::Helpers::Text.red(bold_upcased_env)
    when 'staging'
      Pry::Helpers::Text.yellow(Rails.env)
    when 'development'
      Pry::Helpers::Text.green(Rails.env)
    else
      Rails.env
    end
end

def app_name

  if Rails.root.present?
    File.basename(Rails.root)
  else
    ""
  end
end

# Change the prompt if  we're in RAILS to a RAILS specific prompt.
# if defined?(Rails)
#  Pry.config.prompt = Pry::Prompt.new(
#    "custom",
#    "FA prompt",
#    [proc { |obj, nest_level, _| "[#{app_name}][#{formatted_env}] #{obj}:#{nest_level}> " }]
#  )
#end

# == PLUGINS ===
# amazing_print gem: great syntax colorized printing
begin
  $LOAD_PATH << (ENV['GEM_HOME'] + "/gems/amazing_print-1.2.2/lib")
  require  "amazing_print"
  AmazingPrint.pry!
rescue LoadError => err
  puts "gem install amazing_print  # <-- highly recommended"
end

#$LOAD_PATH << (ENV['GEM_HOME'] + "/gems/live_backtrace-0.1.0/lib")
#require "live_backtrace"
#Trace.trace!

# === REFORMAT EXCEPTIONS ===
Pry.config.exception_handler = proc do |output, exception, _|
  output.puts "\e[31m#{exception.class}: #{exception.message}"
  output.puts "from #{exception.backtrace.first}\e[0m"
end

# === CUSTOM COMMANDS ===

default_command_set = Pry::CommandSet.new do


  # Copy an argument to the clipboard
  command "copy", "Copy argument to the clip-board" do |str|
     IO.popen('pbcopy', 'w') { |f| f << str.to_s }
  end

  # Print a backtrace with only project frames (no gems or framework).
  # This requires amazing_print. If you don't want that gem, then remove
  # `gray, red, and blue` annotations below
  command "sbt", "Sane (project only) backtrace" do
    gems_paths = (Gem.path | [Gem.default_dir]).map { |p| Regexp.escape(p) }
    gems_regexp = %r{(#{gems_paths.join('|')})/(bundler/)?gems/([^/]+)-([\w.]+)/(.*)}

    elided = 0
    caller.each do |c|
      if c.match(gems_regexp)
        elided = elided + 1
      else
        if elided != 0
          p = elided > 1 ? "frames" : "frame"
          colours(:grey) { puts "(elided #{elided} non-project #{p})" }
          elided = 0
        end
        ss = c.split(":")
        colours(:red) { print ss[0] }
        colours(:green) { print ":" + ss[1] }
        print " "
        colours(:blue) { puts ss[2] }
      end
    end
  end

  # Clear the screen.
  command "clear" do
    system "clear"
    if defined?(Rails) 
      output.puts "Rails Environment: " + ENV['RAILS_ENV']
    end
  end

  # Send SQL over ActiveRecord
  command "sql", "Send sql over ActiveRecord." do |query|
    if defined?(Rails)
      pp ActiveRecord::Base.connection.select_all(query)
    else
      pp "No rails env defined"
    end
  end

  # What's the caller of the current method?
  command "caller_method" do |depth|
    depth = depth.to_i || 1
    if /^(.+?):(\d+)(?::in `(.*)')?/ =~ caller(depth+1).first
      file   = Regexp.last_match[1]
      line   = Regexp.last_match[2].to_i
      method = Regexp.last_match[3]
      output.puts "file: #{file}:"
      output.puts "   method/line: #{method}:#{line}"
    end
  end
end

Pry.config.commands.import default_command_set

# Inform Readline when the window resizes

old_winch = trap 'WINCH' do
  if `stty size` =~ /\A(\d+) (\d+)\n\z/
    Readline.set_screen_size $1.to_i, $2.to_i
  end
  old_winch.call unless old_winch.nil? || old_winch == 'SYSTEM_DEFAULT'
end

# Hooks
preload_hook = Pry::Hooks.new.add_hook(:before_session, :add_dirs_to_load_path) do
  # adds the directories /spec and /lib to the path if they exist and not already included
  dir = `pwd`.chomp
  dirs_added = []
  %w(spec lib).map{ |d| "#{dir}/#{d}" }.each do |p|
    if File.exist?(p) && !$:.include?(p)
      $: << p
      dirs_added << p
    end
  end
  puts "Added #{ dirs_added.join(", ") } to load path in ~/.pryrc." if dirs_added.present?
end
preload_hook.exec_hook(:before_session)

org_logger_active_record = nil
org_logger_rails = nil
Pry.hooks.add_hook :before_session, :rails do |output, target, pry|
  if defined?(Rails) && Rails.env
    # output all other log info such as deprecation warnings to the console
#    if Rails.respond_to? :logger=
#      org_logger_rails = Rails.logger
#      Rails.logger = Logger.new STDOUT
#    end

    # load Rails console commands
    if Rails::VERSION::MAJOR >= 3
      require 'rails/console/app'
      require 'rails/console/helpers'
      if Rails.const_defined? :ConsoleMethods
        extend Rails::ConsoleMethods
      end
    else
      require 'console_app'
      require 'console_with_helpers'
    end
  end
end

Pry.hooks.add_hook :after_session, :rails do |output, target, pry|
  if defined?(Rails)
    ActiveRecord::Base.logger = org_logger_active_record if org_logger_active_record
    Rails.logger = org_logger_rails if org_logger_rails
  end
end

# Some monkey patching longggggg methods to short ones.
class Object

  def ims
    (self.methods - Object.instance_methods).sort
  end

  def ivs
    instance_variables
  end

  def iv(name)
    name = "@#{name}" unless name.to_s.start_with?("@")
    instance_variable_get(name)
  end

  def ivset(name, val)
    name = "@#{name}" unless name.to_s.start_with?("@")
    instance_variable_set(name, val)
  end
end

# Make sizeof = memory size.
def sizeof(target, seen = nil)
  require 'objspace'
  require 'set'

  seen    ||= Set.new
  reachable = ObjectSpace.reachable_objects_from(target)

  reachable.reduce(ObjectSpace.memsize_of(target)) do |sum, obj|
    next sum if obj.is_a?(Module)
    next sum if seen.member?(obj.object_id)
    seen.add(obj.object_id)
    sum += sizeof(obj, seen)
  end
end

def sizeof_composed(target, show_contents=false)
   objects = Set.new
   sizeof(target, objects)
   objects.each do |object|
     identity = ObjectSpace._id2ref(object)
     puts "======================================================================"
     puts "Class: #{identity.class}"
     if show_contents == true then
          puts "Contents:"
          ap identity
     end
     puts "======================================================================"
   end
end



def colours(color=blue)
  def_colours = {:green => 32, :blue => 34, :grey => 37, :red => 31 }
  printf "\033[#{def_colours[color]}m";
  yield
  printf "\033[0m"
end

